version: "3.8"


services:

  db:
    container_name: todolist-database
    image: postgres:14.6-alpine
    restart: always
    environment:
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_DB: ${DB_NAME}
    volumes:
      - todolist_pg_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: pg_isready -U ${DB_USER} -d ${DB_NAME}
      interval: 3s
      timeout: 3s
      retries: 5
    networks:
      - backend_nw

  api:
    build:
      context: .
      dockerfile: Dockerfile
    image: vladimirvlasov82/todolist_app
    restart: always
    environment:
      DB_HOST: db
      DB_PASSWORD: ${DB_PASSWORD}
      DB_USER: ${DB_USER}
      DB_NAME: ${DB_NAME}
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "8000:8000"
    healthcheck:
      test: python -c 'import http.client;http.client.HTTPConnection("127.0.0.1:8000", timeout=1).request("GET", "/ping/")'
      interval: 3s
      timeout: 3s
      retries: 5
    networks:
      - backend_nw
      - frontend_nw
    volumes:
      - ./todolist/:/app/todolist

  frontend:
    image: sermalenk/skypro-front:lesson-34
    restart: always
    ports:
      - "80:80"
    depends_on:
      api:
        condition: service_healthy
    networks:
      - frontend_nw
    volumes:
      - ./deploy/nginx.conf:/etc/nginx/conf.d/default.conf
      - ./static/:/app/static/

  migrations:
    build:
      context: .
    image: vladimirvlasov82/todolist_app
    env_file:
      - ./.env
    environment:
      DB_HOST: db
    depends_on:
      db:
        condition: service_healthy
    networks:
      - backend_nw
    volumes:
      - ./.docker_env:/app/.env
    command: python manage.py migrate

volumes:
  todolist_pg_data:
    driver: local

networks:
  backend_nw:
    driver: bridge
  frontend_nw:
    driver: bridge
